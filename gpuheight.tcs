#version 410 core

layout(vertices=4) out;

uniform mat4 model;
uniform mat4 view;
uniform float fovCos;
uniform int outOfFrustumTessLevel = 0;
uniform sampler2D heightMap;
uniform float a=1;

in vec2 TexCoord[];
out vec2 TextureCoord[];

void main()
{
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    TextureCoord[gl_InvocationID] = TexCoord[gl_InvocationID];

    if(gl_InvocationID == 0)
    {

        vec4 eyeSpacePos00 = view * model * gl_in[0].gl_Position;
        vec4 eyeSpacePos01 = view * model * gl_in[1].gl_Position;
        vec4 eyeSpacePos10 = view * model * gl_in[2].gl_Position;
        vec4 eyeSpacePos11 = view * model * gl_in[3].gl_Position;

        // calculate cos of the angle between the camera and -z(0.0, 0.0, -1.0)
        float cosAngle00 = dot(normalize(eyeSpacePos00.xyz), vec3(0.0, 0.0, -1.0));
        float cosAngle01 = dot(normalize(eyeSpacePos01.xyz), vec3(0.0, 0.0, -1.0));
        float cosAngle10 = dot(normalize(eyeSpacePos10.xyz), vec3(0.0, 0.0, -1.0));
        float cosAngle11 = dot(normalize(eyeSpacePos11.xyz), vec3(0.0, 0.0, -1.0));

        float tessLevel0 = outOfFrustumTessLevel;
        float tessLevel1 = outOfFrustumTessLevel;
        float tessLevel2 = outOfFrustumTessLevel;
        float tessLevel3 = outOfFrustumTessLevel;


            if (cosAngle00 >= fovCos ||cosAngle01 >= fovCos ||cosAngle10 >= fovCos ||cosAngle11 >= fovCos)
            {
                const int MIN_TESS_LEVEL = 4;
                const int MAX_TESS_LEVEL = 64;
                const float MIN_DISTANCE = 10;
                const float MAX_DISTANCE = 500;

                //由线段到摄像头的距离来决定外部细分级别
                float dist00 = length(eyeSpacePos00.xyz);
                float dist01 = length(eyeSpacePos01.xyz);
                float dist10 = length(eyeSpacePos10.xyz);
                float dist11 = length(eyeSpacePos11.xyz);
                float distance00 = clamp( (dist00 - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );
                float distance01 = clamp( (dist01 - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 ); 
                float distance10 = clamp( (dist10 - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );
                float distance11 = clamp( (dist11 - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );

                tessLevel0 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance10, distance00) );
                tessLevel1 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance00, distance01) );
                tessLevel2 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance01, distance11) );
                tessLevel3 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance11, distance10) );
            }

        gl_TessLevelOuter[0] = tessLevel0;
        gl_TessLevelOuter[1] = tessLevel1;
        gl_TessLevelOuter[2] = tessLevel2;
        gl_TessLevelOuter[3] = tessLevel3;


        //根据地形粗糙度来确定内部细分因子
        vec2 t00 = TextureCoord[0];
        vec2 t01 = TextureCoord[1];
        vec2 t10 = TextureCoord[2];
        vec2 t11 = TextureCoord[3];

        float Height00 = texture(heightMap, t00).y;
        float Height01 = texture(heightMap, t01).y;
        float Height10 = texture(heightMap, t10).y;
        float Height11 = texture(heightMap, t11).y;

        float maxHeight = max(Height11,max(Height10,max(Height00,Height01)));
        float minHeight = min(Height11,min(Height10,min(Height00,Height01)));

        float roughness=255*(maxHeight-minHeight);
        float Innerlevel= 64*(1/((a*roughness)+1)-1)/(1/255-1)+2;

        //gl_TessLevelInner[0] = Innerlevel;
        //gl_TessLevelInner[1] = Innerlevel;

        //取最大值
        gl_TessLevelInner[0] = (tessLevel1+tessLevel3)/2;
        gl_TessLevelInner[1] = (tessLevel0+tessLevel2)/2;
    }
}